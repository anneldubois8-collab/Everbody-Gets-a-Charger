<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>C-Leg Charger Slide — OPC Mini-Game</title>
  <style>
    html, body { height: 100%; margin: 0; background: #0f172a; color: #e2e8f0; font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; }
    .wrap { display: grid; place-items: center; height: 100%; gap: 12px; padding: 16px; }
    .panel { width: min(1100px, 96vw); background: #111827; border: 1px solid #1f2937; border-radius: 16px; box-shadow: 0 20px 40px rgba(0,0,0,.35); overflow: hidden; }
    .hud { display: flex; justify-content: space-between; align-items: center; padding: 10px 14px; background: #0b1223; border-bottom: 1px solid #1f2937; }
    .hud .left, .hud .right { display: flex; gap: 12px; align-items: center; flex-wrap: wrap; }
    .badge { background: #1f2937; padding: 6px 10px; border-radius: 999px; font-weight: 600; letter-spacing: .2px; }
    .btn { background: #2563eb; border: none; color: white; padding: 8px 12px; border-radius: 10px; font-weight: 700; cursor: pointer; }
    .btn:active { transform: translateY(1px); }
    .btn.ghost { background: #1f2937; color: #e2e8f0; }
    .btn.warn { background: #ef4444; }
    canvas { display: block; width: 100%; height: auto; background: linear-gradient(#0f172a 30%, #0b1223 30%); }
    .footer { padding: 10px 14px; border-top: 1px solid #1f2937; font-size: 14px; color: #94a3b8; display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 8px; }
    .meterWrap { width: 180px; height: 12px; background: #111827; border: 1px solid #374151; border-radius: 999px; overflow: hidden; }
    .meter { height: 100%; background: linear-gradient(90deg, #22c55e, #eab308, #ef4444); width: 0%; transition: width .06s linear; }
    .toast { position: absolute; pointer-events: none; left: 50%; top: 18%; transform: translateX(-50%); font-size: 22px; font-weight: 800; text-shadow: 0 2px 6px rgba(0,0,0,.4); opacity: 0; }
    .overlay { position: absolute; inset: 0; display: none; align-items: center; justify-content: center; background: rgba(3,6,23,.5); }
    .card { background: #0b1223; border: 1px solid #1f2937; border-radius: 14px; padding: 16px; width: min(560px, 92vw); color: #e2e8f0; }
    .row { display: flex; gap: 10px; align-items: center; margin: 8px 0; flex-wrap: wrap; }
    input[type="text"] { background: #0f172a; color: #e2e8f0; border: 1px solid #334155; padding: 8px 10px; border-radius: 8px; }
    table { width: 100%; border-collapse: collapse; margin-top: 8px; }
    th, td { text-align: left; padding: 6px 8px; border-bottom: 1px solid #1f2937; font-size: 14px; }
    th { color: #93c5fd; }
    .muted { color: #94a3b8; font-size: 13px; }
  </style>
</head>
<body>
<div class="wrap">
  <div class="panel" id="gamePanel">
    <div class="hud">
      <div class="left">
        <span class="badge">C-Leg Charger Slide</span>
        <span class="badge">Target: $13,900</span>
        <span class="badge" id="scoreBadge">Score: 0</span>
        <span class="badge" id="roundBadge">Round: 1</span>
        <div class="meterWrap" title="Hold space or press to charge. Release to slide.">
          <div class="meter" id="powerMeter"></div>
        </div>
      </div>
      <div class="right">
        <button class="btn ghost" id="leaderBtn" title="Leaderboard">Leaderboard</button>
        <button class="btn" id="muteBtn" title="Toggle sound">Sound: On</button>
        <button class="btn" id="restartBtn" title="Restart">Restart</button>
      </div>
    </div>
    <div style="position: relative;">
      <canvas id="game" width="1100" height="520" aria-label="C-Leg Charger Slide game"></canvas>
      <div class="toast" id="toast">+0</div>

      <!-- Win overlay with initials and office -->
      <div class="overlay" id="winOverlay">
        <div class="card">
          <h2 style="margin:0 0 8px 0;">You matched the OPC C-Leg price: $13,900</h2>
          <div class="muted">Nice work. Save your run on the leaderboard or play again.</div>
          <div class="row">
            <label for="initials">Initials:</label>
            <input id="initials" type="text" maxlength="5" placeholder="e.g., AD" />
            <label for="office">Office:</label>
            <input id="office" type="text" maxlength="18" placeholder="e.g., St. Pete" />
          </div>
          <div class="row muted" id="runStats">Rounds: —</div>
          <div class="row">
            <button class="btn" id="saveScoreBtn">Save score</button>
            <button class="btn ghost" id="playAgainBtn">Play again</button>
          </div>
        </div>
      </div>

      <!-- Leaderboard overlay -->
      <div class="overlay" id="lbOverlay">
        <div class="card">
          <div style="display:flex;justify-content:space-between;align-items:center;gap:8px;">
            <h3 style="margin:0;">Leaderboard</h3>
            <div class="row">
              <button class="btn ghost" id="closeLbBtn">Close</button>
              <button class="btn warn" id="clearLbBtn" title="Clear all local scores">Clear</button>
            </div>
          </div>
          <div class="muted">Top 10 by fewest rounds. Ties break by fastest time.</div>
          <table id="lbTable">
            <thead>
              <tr><th>#</th><th>Initials</th><th>Office</th><th>Rounds</th><th>Time</th><th>Date</th></tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>

    </div>
    <div class="footer">
      <div>Controls: Hold <strong>Space</strong> or press/hold on mobile to charge. Release to slide.</div>
      <div>Tip: stop just beside your teammate on the bar for max points. Watch the accuracy ring.</div>
    </div>
  </div>
  <small class="muted">Art is intentionally simple and cartoony. No external libraries.</small>
</div>

<script>
(function(){
  // Canvas and UI
  const canvas = document.getElementById('game');
  const ctx = canvas.getContext('2d');
  const scoreEl = document.getElementById('scoreBadge');
  const roundEl = document.getElementById('roundBadge');
  const meter = document.getElementById('powerMeter');
  const restartBtn = document.getElementById('restartBtn');
  const leaderBtn = document.getElementById('leaderBtn');
  const muteBtn = document.getElementById('muteBtn');
  const toast = document.getElementById('toast');

  const winOverlay = document.getElementById('winOverlay');
  const initialsInput = document.getElementById('initials');
  const officeInput = document.getElementById('office');
  const runStats = document.getElementById('runStats');
  const saveScoreBtn = document.getElementById('saveScoreBtn');
  const playAgainBtn = document.getElementById('playAgainBtn');

  const lbOverlay = document.getElementById('lbOverlay');
  const lbClose = document.getElementById('closeLbBtn');
  const lbClear = document.getElementById('clearLbBtn');
  const lbTableBody = document.querySelector('#lbTable tbody');

  const WIDTH = canvas.width;
  const HEIGHT = canvas.height;

  // World layout
  const barY = HEIGHT * 0.65;
  const barLeft = 70;
  const barRight = WIDTH - 60;

  // Names
  const teammates = [
    {name:'ADESUA'}, {name:'ANNE'}, {name:'BAILY'}, {name:'BRAD'}, {name:'BRANDON'}, {name:'BRIAN'},
    {name:'CASEY'}, {name:'CHRIS'}, {name:'CYRUS'}, {name:'ELISA'}, {name:'FRANK'}, {name:'GREG'},
    {name:'HENRY'}, {name:'JACOB'}, {name:'JASON'}, {name:'JILLIAN'}, {name:'KASEY'}, {name:'KEVIN'},
    {name:'KYLE'}, {name:'LAUREL'}, {name:'MICHAEL'}, {name:'MITCHELL'}, {name:'PAUL'}, {name:'ROBYN'},
    {name:'RUXANDRA'}, {name:'SANTRELL'}, {name:'SHANE'}, {name:'STEPHANIE'}, {name:'STEVEN'},
    {name:'TARA'}, {name:'TYLER'}, {name:'WESLEY'}, {name:'ZACHARY'}
  ];

  // Game state
  let score = 0;
  let round = 1;
  let target = {x: 750, name: 'KASEY'};
  let charger = {x: barLeft+25, y: barY-14, vx: 0, moving: false};
  let charging = false;
  let charge = 0; // 0..1
  let increasing = true;
  let gameOver = false;
  let confetti = [];
  let startTime = performance.now();
  let lastStop = null; // for accuracy ring

  // Audio (simple WebAudio beeps)
  const AudioCtx = window.AudioContext || window.webkitAudioContext;
  let audioCtx = null;
  let soundOn = true;
  function ensureAudio(){ if(!audioCtx) audioCtx = new AudioCtx(); }
  function beep(freq=600, dur=0.08, vol=0.2){
    if(!soundOn) return;
    ensureAudio();
    const t0 = audioCtx.currentTime;
    const o = audioCtx.createOscillator();
    const g = audioCtx.createGain();
    o.type = 'sine';
    o.frequency.value = freq;
    g.gain.setValueAtTime(0, t0);
    g.gain.linearRampToValueAtTime(vol, t0 + 0.01);
    g.gain.exponentialRampToValueAtTime(0.001, t0 + dur);
    o.connect(g).connect(audioCtx.destination);
    o.start(t0);
    o.stop(t0 + dur + 0.02);
  }
  function chordWin(){
    if(!soundOn) return;
    beep(440, 0.12, 0.22);
    setTimeout(()=>beep(554,0.12,0.22), 120);
    setTimeout(()=>beep(659,0.14,0.24), 240);
  }

  muteBtn.addEventListener('click', ()=>{
    soundOn = !soundOn;
    muteBtn.textContent = 'Sound: ' + (soundOn ? 'On' : 'Off');
  });

  // Helpers
  function rng(min, max){ return min + Math.random()*(max-min); }

  function resetRound(){
    round++;
    roundEl.textContent = 'Round: ' + round;
    charger.x = barLeft+25;
    charger.y = barY-14;
    charger.vx = 0;
    charger.moving = false;
    lastStop = null;
    const minX = WIDTH*0.45, maxX = barRight-30;
    target.x = Math.floor(minX + Math.random()*(maxX-minX));
    target.name = teammates[Math.floor(Math.random()*teammates.length)].name;
  }

  function restart(){
    score = 0; round = 1; gameOver = false; confetti.length = 0; hideToast();
    scoreEl.textContent = 'Score: ' + score;
    roundEl.textContent = 'Round: ' + round;
    charger.x = barLeft+25; charger.y = barY-14; charger.vx = 0; charger.moving = false;
    const minX = WIDTH*0.45, maxX = barRight-30;
    target.x = Math.floor(minX + Math.random()*(maxX-minX));
    target.name = teammates[Math.floor(Math.random()*teammates.length)].name;
    lastStop = null;
    startTime = performance.now();
    winOverlay.style.display = 'none';
  }

  restartBtn.addEventListener('click', restart);

  function startCharge(){ if(gameOver) return; charging = true; beep(500, 0.05, 0.12); }
  function endCharge(){
    if(gameOver) return;
    if(!charging) return;
    charging = false;
    const minV = 6, maxV = 36;
    charger.vx = minV + charge*(maxV-minV);
    charger.moving = true;
    beep(620, 0.06, 0.12);
  }

  // Keyboard and pointer
  window.addEventListener('keydown', (e)=>{
    if(e.code === 'Space'){ e.preventDefault(); startCharge(); }
  });
  window.addEventListener('keyup', (e)=>{
    if(e.code === 'Space'){ e.preventDefault(); endCharge(); }
  });
  canvas.addEventListener('pointerdown', startCharge);
  window.addEventListener('pointerup', endCharge);

  // Toast
  function showToast(text, color){
    toast.textContent = text;
    toast.style.color = color || '#22c55e';
    toast.style.opacity = 1;
    toast.animate([
      { transform: 'translate(-50%, 0)', opacity: 0 },
      { transform: 'translate(-50%, -12px)', opacity: 1, offset: .2 },
      { transform: 'translate(-50%, -46px)', opacity: .95, offset: .6 },
      { transform: 'translate(-50%, -80px)', opacity: 0 }
    ], { duration: 1200, easing: 'ease-out' });
    setTimeout(()=>{ toast.style.opacity = 0; }, 1100);
  }
  function hideToast(){ toast.style.opacity = 0; }

  // Confetti
  function launchConfetti(){
    confetti.length = 0;
    for(let i=0;i<180;i++){
      confetti.push({
        x: WIDTH/2, y: 40, vx: (Math.random()*2-1)*6, vy: (Math.random()*-1-2)*6,
        g: 0.25+Math.random()*0.25, s: 2+Math.random()*3, r: Math.random()*Math.PI,
        c: `hsl(${Math.floor(Math.random()*360)}, 90%, 60%)`
      });
    }
  }

  function drawConfetti(){
    confetti.forEach(p=>{
      p.vy += p.g; p.x += p.vx; p.y += p.vy; p.r += .1;
      ctx.save(); ctx.translate(p.x,p.y); ctx.rotate(p.r);
      ctx.fillStyle = p.c; ctx.fillRect(-p.s/2,-p.s/2,p.s,p.s*2);
      ctx.restore();
    });
  }

  // Drawing
  function drawBackground(){
    const wallBottom = barY-60;
    const grad = ctx.createLinearGradient(0,0,0,wallBottom);
    grad.addColorStop(0,'#0b132b'); grad.addColorStop(1,'#0a1124');
    ctx.fillStyle = grad; ctx.fillRect(0,0,WIDTH,wallBottom);

    // OPC sign
    ctx.save();
    ctx.translate(WIDTH-210, 60);
    ctx.fillStyle = '#0ea5e9';
    ctx.globalAlpha = .08; ctx.fillRect(-80,-20,160,40);
    ctx.globalAlpha = 1;
    ctx.font = 'bold 22px system-ui'; ctx.fillStyle = '#38bdf8'; ctx.fillText('OPC', -26, 7);
    ctx.restore();

    // Counter
    const wood = ctx.createLinearGradient(0, wallBottom, 0, HEIGHT);
    wood.addColorStop(0, '#4b2e13'); wood.addColorStop(1, '#7f5539');
    ctx.fillStyle = wood; ctx.fillRect(0, wallBottom, WIDTH, HEIGHT - wallBottom);

    // Bar lip
    ctx.fillStyle = '#e2c290';
    ctx.fillRect(0, barY-2, WIDTH, 4);
  }

  function drawEric(){
    const x = barLeft-10, y = barY-36;
    ctx.fillStyle = '#1f2937';
    ctx.fillRect(x, y+28, 18, 20);
    ctx.fillRect(x+20, y+28, 18, 20);
    ctx.fillStyle = '#2563eb';
    ctx.fillRect(x-2, y, 42, 32);
    ctx.beginPath(); ctx.arc(x+19, y-10, 10, 0, Math.PI*2); ctx.fillStyle = '#f1c27d'; ctx.fill();
    ctx.beginPath(); ctx.arc(x+19, y-13, 10, Math.PI, 0); ctx.fillStyle = '#2b2b2b'; ctx.fill();
    ctx.fillStyle = '#f1c27d';
    ctx.fillRect(x+34, y+4, 16, 8);
    ctx.fillStyle = 'white'; ctx.font = 'bold 10px system-ui'; ctx.fillText('Eric', x+4, y+18);
  }

  function drawTeammate(){
    const x = target.x, y = barY-20;
    ctx.fillStyle = '#f5d0a5';
    ctx.beginPath(); ctx.arc(x-18, y+8, 6, 0, Math.PI*2); ctx.fill();
    ctx.beginPath(); ctx.arc(x+18, y+8, 6, 0, Math.PI*2); ctx.fill();
    ctx.beginPath(); ctx.arc(x, y-10, 16, 0, Math.PI*2); ctx.fill();
    const h = [...target.name].reduce((a,c)=>a+c.charCodeAt(0),0);
    const hue = (h*7)%360;
    ctx.fillStyle = `hsl(${hue},55%,35%)`;
    ctx.beginPath(); ctx.arc(x, y-16, 18, Math.PI, 0); ctx.fill();
    ctx.fillStyle = '#111827';
    ctx.beginPath(); ctx.arc(x-6, y-12, 2.5, 0, Math.PI*2); ctx.fill();
    ctx.beginPath(); ctx.arc(x+6, y-12, 2.5, 0, Math.PI*2); ctx.fill();
    ctx.fillStyle = '#0ea5e9';
    ctx.fillRect(x-42, y+20, 84, 18);
    ctx.fillStyle = '#081726'; ctx.font = 'bold 12px system-ui'; ctx.textAlign='center'; ctx.fillText(target.name, x, y+33);
  }

  function drawCharger(){
    const x = charger.x, y = charger.y;
    ctx.strokeStyle = '#0e7490'; ctx.lineWidth = 2; ctx.beginPath();
    ctx.moveTo(x-22,y+6); ctx.bezierCurveTo(x-26,y+8,x-36,y+12,x-42,y+18); ctx.stroke();
    ctx.fillStyle = '#0ea5e9'; ctx.fillRect(x-18, y-8, 36, 16);
    ctx.fillStyle = '#e5e7eb'; ctx.fillRect(x+16, y-2, 6, 2); ctx.fillRect(x+16, y+2, 6, 2);
    ctx.fillStyle = '#022c39'; ctx.fillRect(x-6, y-4, 12, 8);
  }

  // Accuracy ring at last stop
  function drawAccuracy(){
    if(!lastStop) return;
    const {x, y, dx, pts} = lastStop;
    const r = Math.min(140, Math.max(14, dx));
    let c = '#94a3b8';
    if(dx < 64) c = '#22c55e';
    else if(dx < 120) c = '#eab308';
    ctx.save();
    ctx.strokeStyle = c; ctx.lineWidth = 3;
    ctx.beginPath(); ctx.arc(x, y, r, 0, Math.PI*2); ctx.stroke();
    ctx.font = 'bold 14px system-ui'; ctx.fillStyle = c; ctx.textAlign = 'center';
    ctx.fillText('+'+pts+' pts', x, y - r - 8);
    ctx.restore();
  }

  function update(){
    if(charging){
      if(increasing) charge += 0.015; else charge -= 0.015;
      if(charge>=1){ charge=1; increasing=false; }
      if(charge<=0){ charge=0; increasing=true; }
      meter.style.width = Math.floor(charge*100)+'%';
    } else {
      charge *= 0.95; meter.style.width = Math.floor(charge*100)+'%';
    }

    if(charger.moving){
      charger.x += charger.vx;
      charger.vx *= 0.985;
      if(Math.abs(charger.vx) < 0.22 || charger.x >= barRight){
        charger.moving = false;
        if(charger.x > barRight) charger.x = barRight;
        const dx = Math.abs(charger.x - target.x);
        let pts = 0;
        if(dx < 18) pts = 1800; else if(dx < 36) pts = 1200; else if(dx < 64) pts = 800; else if(dx < 100) pts = 500; else if(dx < 150) pts = 300; else pts = 120;
        score += pts;
        scoreEl.textContent = 'Score: ' + score;
        lastStop = {x: charger.x, y: charger.y, dx, pts};
        showToast('+'+pts, pts>=800 ? '#22c55e' : pts>=300 ? '#eab308' : '#94a3b8');
        beep( pts>=800 ? 740 : pts>=300 ? 620 : 520, 0.07, 0.18 );

        if(score >= 13900){
          gameOver = true;
          launchConfetti();
          chordWin();
          setTimeout(()=> showWinOverlay(), 250);
        } else {
          setTimeout(resetRound, 750);
        }
      }
    }
  }

  function draw(){
    ctx.clearRect(0,0,WIDTH,HEIGHT);
    drawBackground();
    ctx.fillStyle = 'rgba(255,255,255,.06)';
    ctx.fillRect(0, barY-8, WIDTH, 8);
    drawTeammate();
    drawEric();
    drawCharger();
    drawAccuracy();
    if(gameOver){ drawConfetti(); }
  }

  function loop(){ update(); draw(); requestAnimationFrame(loop); }

  // Leaderboard
  const LB_KEY = 'opc_cleg_lb';
  function loadLB(){
    try { return JSON.parse(localStorage.getItem(LB_KEY) || '[]'); } catch { return []; }
  }
  function saveLB(arr){ localStorage.setItem(LB_KEY, JSON.stringify(arr)); }
  function addScore(entry){
    const lb = loadLB();
    lb.push(entry);
    lb.sort((a,b)=> a.rounds - b.rounds || a.ms - b.ms);
    if(lb.length > 10) lb.length = 10;
    saveLB(lb);
  }
  function fmtTime(ms){
    const s = ms/1000;
    return s.toFixed(2) + 's';
  }
  function renderLB(){
    const lb = loadLB();
    lbTableBody.innerHTML = lb.map((r,i)=>(
      `<tr>
        <td>${i+1}</td>
        <td>${escapeHtml(r.initials || '')}</td>
        <td>${escapeHtml(r.office || '')}</td>
        <td>${r.rounds}</td>
        <td>${fmtTime(r.ms)}</td>
        <td>${new Date(r.ts).toLocaleDateString()}</td>
      </tr>`
    )).join('') || `<tr><td colspan="6" class="muted">No scores yet.</td></tr>`;
  }
  function escapeHtml(s){ return s.replace(/[&<>\"']/g, m=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;' }[m])); }

  leaderBtn.addEventListener('click', ()=>{ renderLB(); lbOverlay.style.display = 'flex'; });
  lbClose.addEventListener('click', ()=> lbOverlay.style.display = 'none');
  lbClear.addEventListener('click', ()=>{
    if(confirm('Clear all local scores on this device?')){
      saveLB([]);
      renderLB();
    }
  });

  // Win overlay actions
  function showWinOverlay(){
    const ms = performance.now() - startTime;
    runStats.textContent = `Rounds: ${round}   •   Time: ${fmtTime(ms)}`;
    initialsInput.value = '';
    officeInput.value = '';
    winOverlay.style.display = 'flex';
  }
  saveScoreBtn.addEventListener('click', ()=>{
    const ms = performance.now() - startTime;
    addScore({
      initials: (initialsInput.value || '').toUpperCase().slice(0,5),
      office: officeInput.value || '',
      rounds: round,
      ms,
      ts: Date.now()
    });
    winOverlay.style.display = 'none';
    renderLB();
    lbOverlay.style.display = 'flex';
  });
  playAgainBtn.addEventListener('click', ()=>{ winOverlay.style.display = 'none'; restart(); });

  // Init
  restart();
  loop();
})();
</script>
</body>
</html>
